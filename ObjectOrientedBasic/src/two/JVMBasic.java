package two;

public class JVMBasic {

//	JVM의 메모리구조

//	메서드영역(method area) = 클래스 영역(static 관련은 모두 여기)
//	프로그램 실행 중 어떤 클래스가 사용되면, JVM은 해당 클래스의
//	클래스파일(*.class)을 읽어서 분석하여 클래스에 대한 정보(클래스 데이터)를
//	이곳에 저장한다. 이 때 클래스의 클래스변수도 이 영역에 함께 생성된다
//	프로그램 시작~끝까지 언제나 사용가능
	
//	힙영역(heap area) = new 연산자에 관련된 모든 영역(인스턴스,인스턴스변수들 등등)
//	인스턴스가 생성되는 공간. 프로그램 실행 중 생성되는 인스턴스는 모두 이곳에
//	생성된다. 즉 , 인스턴스변수들이 생성되는 공간
//	반영구적인 영역 별일없으면 평생사용, 있으면 소멸됨
//	동적(dynamic)할당
	
//	호출스택(call stack) = 지역변수와 메서드 관련된 영역
//	메서드의 작업에 필요한 메모리 공간을 제공한다. 메서드가 호출되면	
//	호출스택에 호출된 메서드를 위한 메모리가 할당되며, 이 메모리를 메서드가
//	작업을 수행하는 동안 지역변수(매개변수 포함)들과 연산의 중간결과 등을
//	저장하는데 사용된다 그리고 메서드가 작업을 마치면
//	할당되었던 메모리공간은 반환되어 비워진다.
//	순차적임(순서가 정해져있음)
//	-메서드가 호출되면 수행에 필요한 만큼의 메모리를 스택에 할당받는다
//	-메서드가 수행을 마치고나면 사용했던 메모리를 반환하고 스택에서 제거된다
//	-호출스택의 제일 위에 있는 메서드가 현재 실행 중인 메서드이다
//	-아래에 있는 메서드가 바로 위의 메서드를 호출한 메서드이다
	
}
